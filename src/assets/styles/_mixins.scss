@import "./variables";

// Text truncation
@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// breakpoints min-width
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$breakpoint} not found in $breakpoints map.";
  }
}

// Responsive font size mixin
@mixin responsive-font-size($font-family, $size-key) {
  $font-sizes-for-family: map-get($font-sizes, $font-family);

  @if map-has-key($font-sizes-for-family, $size-key) {
    $sizes: map-get($font-sizes-for-family, $size-key);

    font-size: map-get($sizes, sm);

    @include respond-to('md') {
      font-size: map-get($sizes, md);
    }

    @include respond-to('lg') {
      font-size: map-get($sizes, lg);
    }
  } @else {
    @warn "Font size #{$size-key} not found in $font-sizes map for font family #{$font-family}.";
  }
}

// Dynamic spacing mixin
@mixin spacing($property, $multiplier) {
  #{$property}: $spacing-unit * $multiplier;
}

// Utility classes for margin and padding
@mixin generate-spacing-utilities($property) {
  @for $i from 1 through 20 {
    .#{$property}-#{$i} {
      @include spacing($property, $i);
    }
  }
}
